// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserType {
  VETERINARIAN
  ADMIN
  INTERPRETER
}


model User {
  id    String @id @default(uuid())
  externalId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles UserType[] @default([])
  Interpreters Structure[] @relation("interpreter")
  Members StructureUser[] @relation("members")
  SentInvitations UserInvitation[] @relation("user")
  Exams Exam[]
}

model Structure {
  id String @id @default(uuid())
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Cabinet details
  address1 String?
  address2 String?
  zipcode String?
  town String?
  phone String?
  mobile String?
  
  // Account details
  account_lastname String?
  account_firstname String?
  account_email String?
  
  // Status
  is_structure_active Boolean @default(true)
  
  // Relations
  Interpreter User? @relation("interpreter", fields: [interpreterId], references: [id])
  interpreterId String?
  Members StructureUser[] @relation("members")
  @@index([interpreterId])
  Animal Animal[]
  Exams Exam[]
}

model StructureUser {
  id String @id @default(uuid())
  structureId String
  structure Structure @relation("members" , fields: [structureId], references: [id])
  userId String
  user User @relation("members", fields: [userId], references: [id])
  @@index([structureId, userId])
}

model UserInvitation {
  id String @id @default(uuid())
  email String
  createdAt DateTime @default(now())
  userId String?
  user User? @relation("user", fields: [userId], references: [id])

  // Application URLs based on roles
  adminAppUrl String?
  veterinarianAppUrl String?
  interpreterAppUrl String?
  @@index([email])
  @@index([userId])
}

enum AnimalSpecies {
  CHIEN
  CHAT
  OTHER   // nouveaux animaux de compagnie (lapin, hamster, etc.)
}

model AnimalBreed {
  id        String       @id @default(uuid())
  name      String
  name_fr   String
  species   AnimalSpecies
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  Animals   Animal[]     // no @relation here
  isArchived Boolean      @default(false)
}

model Animal {
  id        String       @id @default(uuid())
  name      String
  species   AnimalSpecies
  breedId   String
  externalRef String?
  breed     AnimalBreed  @relation(fields: [breedId], references: [id])
  structureId String
  structure Structure @relation(fields: [structureId], references: [id]) 
  birthDate DateTime?
  comment String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  @@index([structureId])
  @@index([species])
  Exams Exam[]
}

enum ExamStatus {
  PENDING              // Examen vigile
  PROCESSING
  COMPLETED
  ARCHIVED
  CANCELLED
}

enum ManifestationCategory {
  PAROXYSMAL
  STATUS_EPILEPTICUS
  ALERTNESS
  DISTURBANCE_OF_ALERTNESS
  BEHAVIOR_CHANGES
  OTHER
}

enum ParoxysmalSubtype {
  ISOLATED
  GROUPED
}
enum ExamCondition {
  AWAKE_EXAM
  SEDATION_AT_PLACEMENT
  UNDER_SEDATION
}


model Exam {
  id             String   @id @default(uuid())

  status ExamStatus
  // Header
  requestedAt    DateTime
  vetReference   String?

  // Links (adapt id types to your models)
  animalId       String
  animal         Animal    @relation(fields: [animalId], references: [id])
  structureId    String
  structure      Structure @relation(fields: [structureId], references: [id])
  interpreterUserId String?
  interpreter    User?     @relation(fields: [interpreterUserId], references: [id])

  // Clinical context
  requestReason  String?
  history        String?
  clinicalExams  String?

  // Manifestations (free text + dates)
  manifestationCategory    ManifestationCategory[] // e.g. "paroxysmal", "vigilance", "behavior", "other"
  paroxysmalSubtype        ParoxysmalSubtype?   // e.g. "isolated", "grouped", "or null
  manifestationOther       String?
  firstManifestationAt     DateTime?
  lastManifestationAt      DateTime?
  manifestationDescription String?
  manifestationFrequency   String?   // e.g. "daily", "weekly", "monthly", "occasional"
  avgManifestationDurationMin Int?

  // Complementary exams (checkboxes as rows)
  additionalTests ExamAdditionalTest[]

  // Diagnosis & treatments
  clinicalSuspicion               String?
  currentAntiepilepticTreatments  String?
  otherTreatments                 String?

  // Exam conditions
  examCondition   ExamCondition?
  examConditionDescription String?

  // EEG focus & during-exam notes
  eegSpecificEvents  String?
  duringExamClinical String?

  // Comments
  comments        String?

  // Files
  attachments     ExamAttachment[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([animalId])
  @@index([structureId])
  @@index([requestedAt])
}

model ExamAttachment {
  id        String   @id @default(uuid())
  examId    String
  exam      Exam     @relation(fields: [examId], references: [id])

  url       String
  filename  String?
  mimeType  String?
  kind      String?  // e.g. "FOLLOWUP", "MANIFESTATION_VIDEO", "OTHER"

  createdAt DateTime @default(now())

  @@index([examId, kind])
}

enum ExamAdditionalTestType {
  NFS
  BIOCHEMISTRY
  BILE_ACIDS_PRE_POST
  MRI
  LCS
  OTHER
}

model ExamAdditionalTest {
  id        String   @id @default(uuid())
  examId    String
  exam      Exam     @relation(fields: [examId], references: [id])
  type      ExamAdditionalTestType   // e.g. "NFS", "BIOCHEMISTRY", "BILE_ACIDS_PRE_POST", "MRI", "CSF", "OTHER"
  findings  String?

  @@index([examId, type])
}


